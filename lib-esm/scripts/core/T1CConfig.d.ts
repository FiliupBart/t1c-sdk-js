export declare class GCLConfigOptions {
    t1cApiUrl?: string | undefined;
    t1cApiPort?: string | undefined;
    t1cRpcPort?: string | undefined;
    gwOrProxyUrl?: string | undefined;
    apiKey?: string | undefined;
    gwJwt?: string | undefined;
    dsContextPath?: string | undefined;
    agentPort?: number | undefined;
    forceHardwarePinpad?: boolean | undefined;
    sessionTimeout?: number | undefined;
    consentDuration?: number | undefined;
    consentTimeout?: number | undefined;
    osPinDialog?: boolean | undefined;
    lang?: string | undefined;
    gclDownloadLink?: string | undefined;
    gclVersion?: string | undefined;
    constructor(t1cApiUrl?: string | undefined, t1cApiPort?: string | undefined, t1cRpcPort?: string | undefined, gwOrProxyUrl?: string | undefined, apiKey?: string | undefined, gwJwt?: string | undefined, dsContextPath?: string | undefined, agentPort?: number | undefined, forceHardwarePinpad?: boolean | undefined, sessionTimeout?: number | undefined, consentDuration?: number | undefined, consentTimeout?: number | undefined, osPinDialog?: boolean | undefined, lang?: string | undefined, gclDownloadLink?: string | undefined, gclVersion?: string | undefined);
}
export declare class T1CConfig {
    private _gwUrl;
    private _t1cApiUrl;
    private _dsContextPath;
    private _apiKey;
    private _gwJwt;
    private _gclJwt;
    private _citrix;
    private _agentPort;
    private _forceHardwarePinpad;
    private _defaultSessionTimeout;
    private _tokenCompatible;
    private _defaultConsentDuration;
    private _defaultConsentTimeout;
    private _osPinDialog;
    private _contextToken;
    private _lang;
    private _gclDownloadLink;
    private _gclVersion;
    constructor(options: GCLConfigOptions);
    get t1cApiUrl(): string;
    set t1cApiUrl(value: string);
    get dsUrl(): string;
    get dsContextPath(): string;
    set dsContextPath(value: string);
    get apiKey(): string;
    set apiKey(value: string);
    get citrix(): boolean;
    set citrix(value: boolean);
    get agentPort(): number;
    set agentPort(value: number);
    get gwUrl(): string;
    set gwUrl(value: string);
    get forceHardwarePinpad(): boolean;
    set forceHardwarePinpad(value: boolean);
    get tokenCompatible(): boolean;
    set tokenCompatible(value: boolean);
    get defaultConsentDuration(): number;
    set defaultConsentDuration(value: number);
    get defaultConsentTimeout(): number;
    set defaultConsentTimeout(value: number);
    get osPinDialog(): boolean;
    set osPinDialog(value: boolean);
    get contextToken(): string;
    set contextToken(value: string);
    get gclJwt(): string;
    set gclJwt(value: string);
    get lang(): string;
    set lang(value: string);
    get gclDownloadLink(): string;
    set gclDownloadLink(value: string);
    get gclVersion(): string;
    set gclVersion(value: string);
}
