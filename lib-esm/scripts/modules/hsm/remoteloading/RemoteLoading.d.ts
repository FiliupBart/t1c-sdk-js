import { BoolDataResponse, DataResponse, LocalConnection, T1CLibException } from "../../../..";
import { AbstractRemoteLoading, CommandResponse, CommandsResponse, APDU } from "./RemoteLoadingModel";
export declare class RemoteLoading implements AbstractRemoteLoading {
    protected baseUrl: string;
    protected containerUrl: string;
    protected connection: LocalConnection;
    protected reader_id: string;
    static PATHHSMMAPP: string;
    static PATHREADERS: string;
    static OPEN: string;
    static CLOSE: string;
    static CARDPRESENT: string;
    static ATR: string;
    static CCIDFEATURES: string;
    static CCID: string;
    static COMMAND: string;
    static APDU: string;
    static COMMANDS: string;
    static APDUS: string;
    constructor(baseUrl: string, containerUrl: string, connection: LocalConnection, reader_id: string);
    protected reloApp(path?: string): string;
    apdu(apdu: APDU, sessionId?: string, callback?: (error: T1CLibException, data: CommandResponse) => void): Promise<CommandResponse>;
    apdus(apdu: APDU[], sessionId?: string, callback?: (error: T1CLibException, data: CommandsResponse) => void): Promise<CommandsResponse>;
    atr(sessionId?: string, callback?: (error: T1CLibException, data: DataResponse) => void): Promise<DataResponse>;
    ccid(feature: string, command: string, sessionId?: string, callback?: (error: T1CLibException, data: CommandResponse) => void): Promise<CommandResponse>;
    ccidFeatures(sessionId?: string, callback?: (error: T1CLibException, data: DataResponse) => void): Promise<DataResponse>;
    closeSession(sessionId?: string, callback?: (error: T1CLibException, data: DataResponse) => void): Promise<DataResponse>;
    command(tx: string, sessionId?: string, callback?: (error: T1CLibException, data: CommandResponse) => void): Promise<CommandResponse>;
    commands(tx: string[], sessionId?: string, callback?: (error: T1CLibException, data: CommandsResponse) => void): Promise<CommandsResponse>;
    isPresent(sessionId?: string, callback?: (error: T1CLibException, data: BoolDataResponse) => void): Promise<BoolDataResponse>;
    openSession(timeout?: number, callback?: (error: T1CLibException, data: DataResponse) => void): Promise<DataResponse>;
}
