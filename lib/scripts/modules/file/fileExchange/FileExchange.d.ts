import { AbstractFileExchange, FileListResponse, FileResponse, Page, TypeListResponse, TypeResponse } from "./FileExchangeModel";
import { BoolDataResponse, DataResponse, LocalConnection, T1CLibException } from "../../../..";
export declare class FileExchange implements AbstractFileExchange {
    protected baseUrl: string;
    protected containerUrl: string;
    protected connection: LocalConnection;
    static PATHFILEAPP: string;
    static DOWNLOAD: string;
    static UPLOAD: string;
    static TYPECREATE: string;
    static TYPEDIRSCREATE: string;
    static TYPEUPDATE: string;
    static TYPESLIST: string;
    static TYPELIST: string;
    static TYPECONTENTLIST: string;
    static CONTENTLIST: string;
    static TYPEDELETE: string;
    static TYPEEXISTS: string;
    static FILEEXISTS: string;
    static FILEMOVE: string;
    static FILECOPY: string;
    static FILERENAME: string;
    static ACCESSMODE: string;
    static DIRCREATE: string;
    static FILEINFO: string;
    constructor(baseUrl: string, containerUrl: string, connection: LocalConnection);
    copyFile(entity: string, fromType: string, toType: string, fileName: string, newFileName: string, fromRelPath?: [string], toRelPath?: [string], callback?: (error: T1CLibException, data: FileResponse) => void): Promise<FileResponse>;
    createDir(entity: string, type: string, relPath: [string], recursive?: boolean, callback?: (error: T1CLibException, data: FileResponse) => void): Promise<FileResponse>;
    createType(entity: string, type: string, iniTabsPath?: [string], modal?: boolean, timeout?: number, callback?: (error: T1CLibException, data: TypeResponse) => void): Promise<TypeResponse>;
    createTypeDirs(entity: string, type: string, relPath: [string], modal?: boolean, timeout?: number, callback?: (error: T1CLibException, data: FileListResponse) => void): Promise<FileListResponse>;
    deleteType(entity: string, type: string, callback?: (error: T1CLibException, data: boolean) => void): Promise<boolean>;
    download(entity: string, type: string, file: ArrayBuffer, fileName: string, relPath?: [string], implicitCreationType?: boolean, notifyOnCompletion?: boolean, callback?: (error: T1CLibException, data: FileListResponse) => void): Promise<DataResponse>;
    existsFile(entity: string, type: string, relPath: [string], callback?: (error: T1CLibException, data: BoolDataResponse) => void): Promise<BoolDataResponse>;
    existsType(entity: string, type: string, callback?: (error: T1CLibException, data: BoolDataResponse) => void): Promise<BoolDataResponse>;
    getAccessMode(entity: string, type: string, fileName: string, relPath?: [string], callback?: (error: T1CLibException, data: DataResponse) => void): Promise<DataResponse>;
    getFileInfo(entity: string, type: string, fileName: string, relPath?: [string], callback?: (error: T1CLibException, data: FileResponse) => void): Promise<FileResponse>;
    listContent(entity: string, page?: Page, callback?: (error: T1CLibException, data: FileListResponse) => void): Promise<FileListResponse>;
    listType(entity: string, type: string, callback?: (error: T1CLibException, data: TypeResponse) => void): Promise<TypeResponse>;
    listTypeContent(entity: string, type: string, relPath?: [string], page?: Page, callback?: (error: T1CLibException, data: FileListResponse) => void): Promise<FileListResponse>;
    listTypes(entity: string, page?: Page, callback?: (error: T1CLibException, data: TypeListResponse) => void): Promise<TypeListResponse>;
    moveFile(entity: string, fromType: string, toType: string, fileName: string, fromRelPath?: [string], toRelPath?: [string], callback?: (error: T1CLibException, data: FileResponse) => void): Promise<FileResponse>;
    renameFile(entity: string, type: string, fileName: string, newFileName: string, relPath?: [string], callback?: (error: T1CLibException, data: FileResponse) => void): Promise<FileResponse>;
    updateType(entity: string, type: string, timeout?: number, callback?: (error: T1CLibException, data: TypeResponse) => void): Promise<TypeResponse>;
    upload(entity: string, type: string, fileName: string, relPath?: [string], notifyOnCompletion?: boolean, callback?: (error: T1CLibException, data: FileListResponse) => void): Promise<ArrayBuffer>;
    protected fileApp(path?: string): string;
}
