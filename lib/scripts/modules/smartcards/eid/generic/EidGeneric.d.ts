import { LocalConnection } from '../../../../core/client/Connection';
import { T1CLibException } from '../../../../core/exceptions/CoreExceptions';
import { AbstractEidGeneric, AddressResponse, AllCertsResponse, AuthenticateResponse, BiometricDataResponse, PictureResponse, SignResponse, TokenDataResponse } from './EidGenericModel';
import { CertificateResponse, DataArrayResponse, DataObjectResponse, T1CResponse } from '../../../../core/service/CoreModel';
import { Options, AuthenticateOrSignData, VerifyPinData } from '../../TokenCard';
export declare class EidGeneric implements AbstractEidGeneric {
    protected baseUrl: string;
    protected containerUrl: string;
    protected connection: LocalConnection;
    protected reader_id: string;
    static PATH_TOKEN_APP: string;
    static PATH_READERS: string;
    static ALL_DATA: string;
    static ALL_CERTIFICATES: string;
    static CERT_ROOT: string;
    static CERT_AUTHENTICATION: string;
    static CERT_NON_REPUDIATION: string;
    static CERT_ENCRYPTION: string;
    static CERT_INTERMEDIATE: string;
    static BIOMETRIC: string;
    static ADDRESS: string;
    static PHOTO: string;
    static TOKEN: string;
    static VERIFY_PIN: string;
    static SIGN_DATA: string;
    static AUTHENTICATE: string;
    static VERIFY_PRIV_KEY_REF: string;
    static SUPPORTED_ALGOS: string;
    constructor(baseUrl: string, containerUrl: string, connection: LocalConnection, reader_id: string);
    allData(module: string, options: string[] | Options, callback?: (error: T1CLibException, data: DataObjectResponse) => void): Promise<DataObjectResponse>;
    biometric(module: string, callback?: (error: T1CLibException, data: BiometricDataResponse) => void): Promise<BiometricDataResponse>;
    address(module: string, callback?: (error: T1CLibException, data: AddressResponse) => void): Promise<AddressResponse>;
    tokenData(module: string, callback?: (error: T1CLibException, data: TokenDataResponse) => void): Promise<TokenDataResponse>;
    picture(module: string, callback?: (error: T1CLibException, data: PictureResponse) => void): Promise<PictureResponse>;
    rootCertificate(module: string, callback?: (error: T1CLibException, data: CertificateResponse) => void): Promise<CertificateResponse>;
    intermediateCertificates(module: string, callback?: (error: T1CLibException, data: CertificateResponse) => void): Promise<CertificateResponse>;
    authenticationCertificate(module: string, callback?: (error: T1CLibException, data: CertificateResponse) => void): Promise<CertificateResponse>;
    nonRepudiationCertificate(module: string, callback?: (error: T1CLibException, data: CertificateResponse) => void): Promise<CertificateResponse>;
    encryptionCertificate(module: string, callback?: (error: T1CLibException, data: CertificateResponse) => void): Promise<CertificateResponse>;
    allAlgoRefs(module: string, callback?: (error: T1CLibException, data: DataArrayResponse) => void): Promise<DataArrayResponse>;
    allCerts(module: string, options: string[] | Options, callback?: (error: T1CLibException, data: AllCertsResponse) => void): Promise<AllCertsResponse>;
    verifyPin(module: string, body: VerifyPinData, callback?: (error: T1CLibException, data: T1CResponse) => void): Promise<T1CResponse>;
    authenticate(module: string, body: AuthenticateOrSignData, callback?: (error: T1CLibException, data: AuthenticateResponse) => void): Promise<AuthenticateResponse>;
    sign(module: string, body: AuthenticateOrSignData, callback?: (error: T1CLibException, data: SignResponse) => void): Promise<SignResponse>;
    protected tokenApp(module: string, path?: string): string;
}
