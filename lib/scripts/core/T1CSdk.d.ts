import { CoreService } from './service/CoreService';
import { DataResponse } from './service/CoreModel';
import { T1CLibException } from './exceptions/CoreExceptions';
import { AbstractEidGeneric } from "../modules/smartcards/eid/generic/EidGenericModel";
import { AbstractEidBE } from '../modules/smartcards/eid/be/EidBeModel';
import { AbstractAventra } from '../modules/smartcards/pki/aventra4/AventraModel';
import { AbstractOberthur73 } from "../modules/smartcards/pki/oberthur73/OberthurModel";
import { T1CConfig } from './T1CConfig';
import { ModuleFactory } from "../modules/ModuleFactory";
import { AbstractIdemia } from "../modules/smartcards/pki/idemia82/IdemiaModel";
import { AbstractEmv } from "../modules/payment/emv/EmvModel";
import { AbstractFileExchange } from "../modules/file/fileExchange/FileExchangeModel";
import { AbstractRemoteLoading } from "../modules/hsm/remoteloading/RemoteLoadingModel";
import { AbstractPkcs11Generic } from "../modules/pkcs11/generic/Pkcs11GenericModel";
export declare class T1CClient {
    private _t1cInstalled;
    private localConfig;
    private moduleFactory;
    private coreService;
    private connection;
    private authConnection;
    private authAdminConnection;
    private adminConnection;
    private remoteConnection;
    private remoteApiKeyConnection;
    private localTestConnection;
    constructor(cfg: T1CConfig);
    static checkPolyfills(): void;
    private static getConsent;
    static initialize(cfg: T1CConfig, consentToken?: string, callback?: (error?: T1CLibException, client?: T1CClient) => void): Promise<T1CClient>;
    core: () => CoreService;
    config: () => T1CConfig;
    mf: () => ModuleFactory;
    generic: (reader_id: string) => AbstractEidGeneric;
    genericMeta: () => AbstractEidGeneric;
    pkcs11Generic: () => AbstractPkcs11Generic;
    fileex: () => AbstractFileExchange;
    beid: (reader_id: string) => AbstractEidBE;
    remoteloading: (reader_id: string) => AbstractRemoteLoading;
    emv: (reader_id: string) => AbstractEmv;
    aventra: (reader_id: string) => AbstractAventra;
    oberthur: (reader_id: string) => AbstractOberthur73;
    idemia: (reader_id: string) => AbstractIdemia;
    set t1cInstalled(value: boolean);
    retrieveEncryptedUserPin(callback?: (error: T1CLibException, data: DataResponse) => void): Promise<DataResponse>;
}
